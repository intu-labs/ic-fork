benchmarks:
  extends:
    - .bazel-test-all
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "rust-benchmarks"'
  needs: []
  artifacts:
    paths:
      - report
  timeout: 12h
  variables:
    BAZEL_COMMAND: "run"
    RUST_BACKTRACE: "full"
  tags:
    - rust-benchmarks
  script:
    - |
      set -eEuo pipefail

      TARGET_LIST=$(bazel query "attr(tags, 'rust_bench', ${TARGETS:-'//rs/...'})")
      for TARGET in $TARGET_LIST; do
          BAZEL_TARGETS="$TARGET"
          time ./gitlab-ci/src/bazel-ci/main.sh
      done
      find -L ./bazel-out -name 'benchmark.json'

      set -x
      while IFS= read -r bench_dir; do
        echo '{}' | jq -cMr \
          --slurpfile benchmark "$bench_dir/benchmark.json" \
          --slurpfile estimates "$bench_dir/estimates.json" \
          --arg system x86_64-linux \
          --arg timestamp "$(date --utc --iso-8601=seconds)" \
          --arg rev "$CI_COMMIT_SHA" \
          '.benchmark = $benchmark[] |
          .estimates = $estimates[] |
          .package = "replica-benchmarks" |
          .system = $system |
          .timestamp = $timestamp |
          .rev = $rev |
          .revCount = 1' \
          > report.json
        curl -sS -o /dev/null -H 'Content-Type: application/json' --data @report.json \
          "http://elasticsearch.dfinity.systems:9200/ci-performance-test/properties?pretty"
      done < <(find -L ./bazel-out -type d -path '*/new')
  parallel:
    matrix:
      - TARGETS: "//rs/crypto/..."
      # IDX-2849
      #- TARGETS: "//rs/execution_environment/..."
      # IDX-2850
      #- TARGETS: "//... - //rs/crypto/... - //rs/execution_environment/..."
