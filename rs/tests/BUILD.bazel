load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("@io_bazel_rules_docker//docker/package_managers:download_pkgs.bzl", "download_pkgs")
load("@io_bazel_rules_docker//docker/package_managers:install_pkgs.bzl", "install_pkgs")
load(":system_tests.bzl", "uvm_config_image")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("//rs/tests:common.bzl", "DEPENDENCIES", "MACRO_DEPENDENCIES", "mainnet_nns_canisters", "mainnet_sns_canisters", "qualifying_nns_canisters", "qualifying_sns_canisters", "symlink_dir", "tip_nns_canisters", "tip_sns_canisters")

package(default_visibility = ["//visibility:public"])

exports_files([
    "src/cow_safety.wasm",
    "src/message.wasm",
    "activate-systest-uvm-config",
])

ALIASES = {
    "//rs/utils": "utils",
}

rust_library(
    name = "tests",
    srcs = glob(["src/**/*.rs"]),
    aliases = ALIASES,
    compile_data = [
        "//ic-os/guestos:rootfs/opt/ic/share/ic.json5.template",
        "src/consensus/cow_safety.wasm",
        "src/message.wasm",
        "src/counter.wat",
        "src/ledger_tests/transaction_ledger_correctness.wasm",
    ],
    crate_name = "ic_tests",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES,
)

download_pkgs(
    name = "ubuntu_test_runtime_pkg",
    additional_repos = [
        "deb http://security.ubuntu.com/ubuntu focal-security main",
    ],
    image_tar = "@ubuntu_base//image",
    packages = [
        "ca-certificates",
        "curl",  # TODO: remove since this is for debugging
        "dosfstools",
        "libssl1.1",  # the test-driver depends on libssl1.1.
        "libunwind8",  # idem
        "mtools",
        "openssh-client",  # for ssh-keygen.
        "rsync",  # for //rs/tests/consensus/orchestrator:sr_app_same_nodes_test
        "zstd",  # for create-universal-vm-config-image.sh.
    ],
    tags = ["manual"],
)

install_pkgs(
    name = "ubuntu_test_runtime_image",
    image_tar = "@ubuntu_base//image",
    installables_tar = ":ubuntu_test_runtime_pkg.tar",
    installation_cleanup_commands = "rm -rf /var/lib/apt/lists/*",
    output_image_name = "ubuntu_test_runtime_image",
    tags = ["manual"],
)

uvm_config_image(
    name = "colocate_uvm_config_image",
    srcs = [
        "//rs/tests:activate-systest-uvm-config",
        "@ubuntu_test_runtime//image",
    ],
    mode = "664",
    modes = {
        "activate": "775",
    },
    remap_paths = {
        "/activate-systest-uvm-config": "/activate",
    },
    tags = ["manual"],  # this target will be built if required as a dependency of another target
)

rust_test(
    name = "tests_test",
    aliases = ALIASES,
    crate = ":tests",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES,
)

exports_files([
    "create-universal-vm-config-image.sh",
])

filegroup(
    name = "grafana_dashboards",
    srcs = glob(["dashboards/**/*"]),
)

sh_binary(
    name = "create_universal_vm_config_image_sh",
    srcs = ["create-universal-vm-config-image.sh"],
)

sh_binary(
    name = "create_universal_vm_config_image_from_tar_sh",
    srcs = ["create-universal-vm-config-image-from-tar.sh"],
)

tip_nns_canisters(
    name = "tip-nns-canisters",
)

mainnet_nns_canisters(
    name = "mainnet-nns-canisters",
)

qualifying_nns_canisters(
    name = "qualifying-nns-canisters",
)

tip_sns_canisters(
    name = "tip-sns-canisters",
)

mainnet_sns_canisters(
    name = "mainnet-sns-canisters",
)

qualifying_sns_canisters(
    name = "qualifying-sns-canisters",
)

symlink_dir(
    name = "recovery/binaries",
    targets = {
        "//rs/registry/admin:ic-admin": "ic-admin",
        "//rs/canister_sandbox/sandbox_launcher": "sandbox_launcher",
        "//rs/canister_sandbox": "canister_sandbox",
    },
)

symlink_dir(
    name = "backup/binaries",
    targets = {
        "//rs/backup:ic-backup": "ic-backup",
        "//rs/replay:ic-replay": "ic-replay",
        "//rs/canister_sandbox/sandbox_launcher": "sandbox_launcher",
        "//rs/canister_sandbox": "canister_sandbox",
    },
)

exports_files([
    "src/orchestrator/orchestrator_universal_vm_activation.sh",
])

copy_file(
    name = "static-file-server_image",
    src = "@static-file-server//image",
    out = "static-file-server.tar",
)

exports_files([
    "src/btc_integration/bitcoin.conf",
    "src/btc_integration/btc_activate.sh",
])

uvm_config_image(
    name = "btc_uvm_config_image",
    srcs = [
        ":src/btc_integration/bitcoin.conf",
        ":src/btc_integration/btc_activate.sh",
        "@bitcoind//image",
    ],
    mode = "664",
    modes = {
        "activate": "775",
    },
    remap_paths = {
        "/btc_activate.sh": "/activate",
    },
    tags = ["manual"],  # this target will be built if required as a dependency of another target
)

filegroup(
    name = "rosetta_workspace",
    srcs = glob(["rosetta_workspace/*"]),
)

exports_files([
    "src/canister_http/universal_vm_activation.sh",
])

copy_file(
    name = "minica_image",
    src = "@minica//image",
    out = "minica.tar",
)

uvm_config_image(
    name = "http_uvm_config_image",
    srcs = [
        ":minica_image",
        ":src/canister_http/universal_vm_activation.sh",
        "//ic-os/guestos:rootfs/dev-certs/canister_http_test_ca.cert",
        "//ic-os/guestos:rootfs/dev-certs/canister_http_test_ca.key",
        "//rs/tests/httpbin-rs:httpbin_image.tar",
    ],
    mode = "664",
    modes = {
        "activate": "775",
    },
    remap_paths = {
        "/universal_vm_activation.sh": "/activate",
        "/canister_http_test_ca.cert": "/cert.pem",
        "/canister_http_test_ca.key": "/key.pem",
    },
    tags = ["manual"],  # this target will be built if required as a dependency of another target
)

symlink_dir(
    name = "ic-hs",
    targets = {
        "@ic-hs//:build/ic-ref-test": "ic-ref-test",
        "@ic-hs//:test-data": "test-data",
    },
)

uvm_config_image(
    name = "nns_dapp_specs_uvm_config_image",
    srcs = [
        ":activate-systest-uvm-config",
        "//rs/tests/replicated_tests:nns_dapp_specs_image.tar",
    ],
    mode = "664",
    modes = {
        "activate": "775",
    },
    remap_paths = {
        "/activate-systest-uvm-config": "/activate",
    },
    tags = ["manual"],  # this target will be built if required as a dependency of another target
)
