load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("@aspect_rules_sol//sol:defs.bzl", "sol_binary")
load("//bazel:canisters.bzl", "rust_canister")

package(default_visibility = ["//visibility:public"])

sol_binary(
    name = "minter_contract",
    srcs = ["minter.sol"],
)

# Export the compiled bytecode and ABI files as artifacts
filegroup(
    name = "contract_artifacts",
    srcs = [
        ":minter_contract",
    ],
    visibility = ["//visibility:public"],
)

rust_library(
    name = "minter",
    srcs = glob(
        ["src/**/*.rs"],
        exclude = ["src/main.rs"],
    ),
    crate_name = "ic_cketh_minter",
    proc_macro_deps = [
        "@crate_index//:ic-cdk-macros",
    ],
    version = "0.1.0",
    deps = [
        "//rs/crypto/ecdsa_secp256k1",
        "//rs/crypto/sha3",
        "//rs/types/ic00_types",
        "@crate_index//:candid",
        "@crate_index//:ethabi",
        "@crate_index//:ethnum",
        "@crate_index//:hex",
        "@crate_index//:hex-literal",
        "@crate_index//:ic-cdk",
        "@crate_index//:num-bigint",
        "@crate_index//:rlp",
        "@crate_index//:serde",
        "@crate_index//:serde_bytes",
        "@crate_index//:serde_json",
    ],
)

rust_test(
    name = "lib_test",
    crate = ":minter",
    deps = [
        ":minter",
        "@crate_index//:assert_matches",
        "@crate_index//:ethers-core",
    ],
)

rust_canister(
    name = "cketh_minter",
    srcs = ["src/main.rs"],
    crate_name = "ic_cketh_minter_canister",
    proc_macro_deps = [
        "@crate_index//:ic-cdk-macros",
    ],
    service_file = "cketh_minter.did",
    deps = [
        ":minter",
        "//rs/crypto/ecdsa_secp256k1",
        "//rs/rust_canisters/http_types",
        "@crate_index//:candid",
        "@crate_index//:ciborium",
        "@crate_index//:ethabi",
        "@crate_index//:hex",
        "@crate_index//:ic-cdk",
        "@crate_index//:ic-cdk-timers",
        "@crate_index//:ic-metrics-encoder",
    ],
)
